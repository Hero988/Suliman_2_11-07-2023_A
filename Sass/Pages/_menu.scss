
    .arrow-left-custom {
        position: relative;
        right: 363px;
        font-size: 20px;
        color: #353535;
    }

    .image-styling {
        height: 350px;
        width: 450px;
    }

    .menu-container-ohmyfood {
        position: relative;

        top: -59px;

        // This sets the width and height of the container to 100px each.
        width: 420px;
        height: 1200px;

        padding-bottom: 50px;
        
        // This sets the top-left and top-right border radii to 10px each, making the top corners rounded.
        border-top-left-radius: 50px;
        border-top-right-radius: 50px;
        
        // This sets the background color of the container to F6F6F6.
        background-color: #F6F6F6;
    }

    .menu-title {
        position: relative;
        top: 36px;
        right: -23px;
    }

    .heart-custom-title {
        position: relative;
        right: -344px;
        font-size: 30px;
        top: -3px;
    }

    // The styles for the menu-container-main
    .menu-container-main {
        // Using display: flex; makes the container a flex container and its children flex items.
        display: flex;
        // This makes the main axis vertical and lays out the flex items in a column.
        flex-direction: column;
        // This adds some space between the flex items.
        gap: 20px;

        margin-top: 27px;
    }

    // The styles for the grid
    .grid {
        // This makes the grid a flex container and its children flex items.
        display: flex;
        // This makes the main axis vertical and lays out the flex items in a column.
        flex-direction: column;
        // This adds some space between the flex items.
        gap: 20px;
    }

    // Define the animation.
    // @keyframes fadeIn {...}: This defines the fadeIn animation. 
    // The animation starts at 0% (with opacity: 0 and visibility: hidden), and ends at 100% (with opacity: 1 and visibility: visible). 
    // This means that elements will transition from being completely transparent and invisible to fully opaque and visible.
    @keyframes fadeIn {
        0% {
            opacity: 0;
            visibility: hidden;
        }
        100% {
            opacity: 1;
            visibility: visible;
        }
    }

    @keyframes slideUpFadeIn {
        0% {
            opacity: 0;
            transform: translateY(50px);
        }
        100% {
            opacity: 1;
            transform: translateY(0);
        }
    }

    // The styles for the card
    .card {
        position: relative;
        // This sets the width and height of the card to 100px each.
        width: 350px;
        height: 50px;
        // This makes the card a flex container and its children flex items.
        display: flex;
        // This makes the main axis vertical and lays out the flex items in a column.
        flex-direction: column;
        // This aligns the flex items to the right.
        align-items: flex-end;
        // This justifies the content to the space-between.
        justify-content: space-between;
        // This sets the padding inside the card.
        padding: 10px;

        align-items: flex-start; /* Align items to the start (left side) of the card */
        justify-content: space-between; /* Distribute space evenly between items */

        border-radius: 20px;
        background-color: white;

        transition: width 0.3s ease;

        margin-left: 22px;
        top: 11px;

        opacity: 0; /* Hide the card initially */

        /* Add the animation */
        animation: slideUpFadeIn 2s ease-out;

        // cards remain visible after the animation is complete.
        animation-fill-mode: forwards;

        /* Hide the checkmark initially and set its width to 0 */
        .checkmark, .custom-checkmark {
            opacity: 0;
            width: 0;
            /* Start with the element's width at 0 */
            /* The checkmark is moved 100px to the right (offscreen) */
            transform: translateX(100px); 
            /* Transition both the width, opacity and transform properties */
            transition: width 0.5s, opacity 0.5s, transform 0.5s; 
        }
    }

    .card-content {
        display: flex;
        flex-direction: column;
        align-items: flex-start; /* Align items to the start (left side) of the card */
        justify-content: space-between; /* Distribute space evenly between items */
    }    

    /* When the card is hovered over */
    .card:hover {
        position: relative;
        cursor: pointer;

        .card-price {
            /* Moves the card price to the right when the card is hovered on */
            right: -254px;
        }

        .card-text-menu {
            width: 250px;
        }

        /* Make the checkmark visible and increase its width */
        .checkmark, .custom-checkmark {
            opacity: 1;
            /* Increase the width to the original size */
            width: 70px; /* Update this value to the original width of your checkmark */
            /* Move the checkmark to its original position */
            transform: translateX(0); 
        }
    }

    // Unpause the animation for each card at the right time.
    // @for $i from 1 through 9 {...}: This is a loop that generates SCSS for the first 9 .card elements nested within a .grid element.
    @for $i from 1 through 9 {
        // .grid .card:nth-of-type(#{$i}) {...}: This targets the i-th .card within each .grid. #{$i} is a variable that holds the current number in the loop, 
        // and nth-of-type is a CSS selector that matches elements of a certain type, based on their order among their siblings.
        .grid .card:nth-of-type(#{$i}) {
            // Unpause the animation after a delay. Each card's delay is slightly longer than the last.
            //  This delays the start of the animation. Each .card has a slightly longer delay than the one before it, creating a staggered animation effect.
            animation-delay: $i * 0.5s;
            // This resumes the paused animation, causing each .card to start fading in after its delay period.
            animation-play-state: running;
            // In simpler terms, this code makes each card fade in one by one, each half a second apart, from being completely invisible to fully visible.
        }
    }
    
    /* adjust width of .card-text-menu */
    .card-text-menu {
        width: 100%; /* take up full width of the card */
        /* rest of your styles... */
    }

    .checkmark {
        position: relative;

        font-size: 25px;

        color: white;

        width: 70px;
        height: 70px;

        // Set the background color to green.
        background-color: $tertiary-color;   

        // Set the top-right and bottom-right corners to be round.
        border-top-right-radius: 20px;
        border-bottom-right-radius: 20px;

        top: -82px;
        right: -290px;
        
    } 

    .checkmark-enchanted-plate {
        @extend .checkmark;
        height: 93px;
        top: -105px;
    }

    .custom-checkmark {
        position: relative;
        right: -25px;
        top: 24px;
        height: 100px;
        width: 100px;
    }

    .card-title {
        position: relative;
        // This sets the margin to 0 to remove any space around the text.
        margin: 0;
        font-weight: bold;
        font-size: 19px;
        top: 4px;
    }

    .card-text-menu {
        margin: 0;
        font-size: 16.8px;
        margin-top: 11px;
        transition: width 0.3s ease;

        white-space: nowrap;  // Prevents the text from wrapping to the next line
        overflow: hidden;  // Clips the text if it overflows
        text-overflow: ellipsis;  // Displays an ellipsis ("...") to represent clipped text
        width: 310px;  // Adjust this value as needed. This sets the maximum width before text gets clipped.
        display: block;  // Treat this element as a block level element
    }
    
    .card-price {
        position: relative;
        font-weight: bold;
        font-size: 16px;
        right: -321px;
        top: -21px;
        transition: right 0.3s ease;
    }

    .grid-title {
        position: relative;
        right: -26px;
        top: 20px;
        padding-bottom: 10px;

        // This adds a half line under the text.
        // The line is 1px high, spans 50% of the width of the text, and is green.
        border-bottom: 3px solid $tertiary-color;

        // This adjusts the width of the line to make it a "half line".
        // The line is centered by setting the left and right margins to auto.
        width: 10%;

        // This prevents the text from wrapping to the next line.
        white-space: nowrap;
    }

    .card-enchanted-plate {
        @extend .card;
        height: 71px;
    }

    .menu-container-ohmyfood-enchanted-plate {
        @extend .menu-container-ohmyfood;
        top:-114px;
        height: 1266px;
    }

    .menu-container-ohmyfood-Le-Gourmand {
        @extend .menu-container-ohmyfood;
        top:-114px;
        height: 1217px;
    }


    